// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(RustFrameworkFFI)
import RustFrameworkFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_proton_authenticator_common_mobile_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_proton_authenticator_common_mobile_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureProtonAuthenticatorCommonMobileInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol AuthenticatorCryptoProtocol: AnyObject {
    
    func decryptEntry(ciphertext: Data, key: Data) throws  -> AuthenticatorEntryModel
    
    func decryptManyEntries(ciphertexts: [Data], key: Data) throws  -> [AuthenticatorEntryModel]
    
    func encryptEntry(model: AuthenticatorEntryModel, key: Data) throws  -> Data
    
    func encryptManyEntries(models: [AuthenticatorEntryModel], key: Data) throws  -> [Data]
    
    func generateKey()  -> Data
    
}
open class AuthenticatorCrypto: AuthenticatorCryptoProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_proton_authenticator_common_mobile_fn_clone_authenticatorcrypto(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_proton_authenticator_common_mobile_fn_constructor_authenticatorcrypto_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_proton_authenticator_common_mobile_fn_free_authenticatorcrypto(pointer, $0) }
    }

    

    
open func decryptEntry(ciphertext: Data, key: Data)throws  -> AuthenticatorEntryModel  {
    return try  FfiConverterTypeAuthenticatorEntryModel_lift(try rustCallWithError(FfiConverterTypeAuthenticatorCryptoError_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorcrypto_decrypt_entry(self.uniffiClonePointer(),
        FfiConverterData.lower(ciphertext),
        FfiConverterData.lower(key),$0
    )
})
}
    
open func decryptManyEntries(ciphertexts: [Data], key: Data)throws  -> [AuthenticatorEntryModel]  {
    return try  FfiConverterSequenceTypeAuthenticatorEntryModel.lift(try rustCallWithError(FfiConverterTypeAuthenticatorCryptoError_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorcrypto_decrypt_many_entries(self.uniffiClonePointer(),
        FfiConverterSequenceData.lower(ciphertexts),
        FfiConverterData.lower(key),$0
    )
})
}
    
open func encryptEntry(model: AuthenticatorEntryModel, key: Data)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeAuthenticatorCryptoError_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorcrypto_encrypt_entry(self.uniffiClonePointer(),
        FfiConverterTypeAuthenticatorEntryModel_lower(model),
        FfiConverterData.lower(key),$0
    )
})
}
    
open func encryptManyEntries(models: [AuthenticatorEntryModel], key: Data)throws  -> [Data]  {
    return try  FfiConverterSequenceData.lift(try rustCallWithError(FfiConverterTypeAuthenticatorCryptoError_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorcrypto_encrypt_many_entries(self.uniffiClonePointer(),
        FfiConverterSequenceTypeAuthenticatorEntryModel.lower(models),
        FfiConverterData.lower(key),$0
    )
})
}
    
open func generateKey() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorcrypto_generate_key(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorCrypto: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthenticatorCrypto

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticatorCrypto {
        return AuthenticatorCrypto(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AuthenticatorCrypto) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorCrypto {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AuthenticatorCrypto, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorCrypto_lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticatorCrypto {
    return try FfiConverterTypeAuthenticatorCrypto.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorCrypto_lower(_ value: AuthenticatorCrypto) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAuthenticatorCrypto.lower(value)
}






public protocol AuthenticatorErrorProtocol: AnyObject {
    
    func message()  -> String
    
}
open class AuthenticatorError: AuthenticatorErrorProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_proton_authenticator_common_mobile_fn_clone_authenticatorerror(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_proton_authenticator_common_mobile_fn_free_authenticatorerror(pointer, $0) }
    }

    

    
open func message() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorerror_message(self.uniffiClonePointer(),$0
    )
})
}
    
    open var debugDescription: String {
        return try!  FfiConverterString.lift(
            try! rustCall() {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorerror_uniffi_trait_debug(self.uniffiClonePointer(),$0
    )
}
        )
    }

}
extension AuthenticatorError: CustomDebugStringConvertible {}
extension AuthenticatorError: Swift.Error {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorError: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthenticatorError

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticatorError {
        return AuthenticatorError(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AuthenticatorError) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorError {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AuthenticatorError, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorError_lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticatorError {
    return try FfiConverterTypeAuthenticatorError.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorError_lower(_ value: AuthenticatorError) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAuthenticatorError.lower(value)
}




extension AuthenticatorError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorError__as_error: FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> AuthenticatorError {
        var reader = createReader(data: Data(rustBuffer: buf))
        return try FfiConverterTypeAuthenticatorError.read(from: &reader)
    }

    public static func lower(_ value: AuthenticatorError) -> RustBuffer {
        fatalError("not implemented")
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorError {
        fatalError("not implemented")
    }

    public static func write(_ value: AuthenticatorError, into buf: inout [UInt8]) {
        fatalError("not implemented")
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorError__as_error_lift(_ buf: RustBuffer) throws -> AuthenticatorError {
    return try FfiConverterTypeAuthenticatorError__as_error.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorError__as_error_lower(_ value: AuthenticatorError) -> RustBuffer {
    return FfiConverterTypeAuthenticatorError__as_error.lower(value)
}




public protocol AuthenticatorImporterProtocol: AnyObject {
    
    func importFrom2fas(contents: String, password: String?) throws  -> AuthenticatorImportResult
    
    func importFromAegisJson(contents: String, password: String?) throws  -> AuthenticatorImportResult
    
    func importFromAegisTxt(contents: String) throws  -> AuthenticatorImportResult
    
    func importFromBitwardenCsv(contents: String) throws  -> AuthenticatorImportResult
    
    func importFromBitwardenJson(contents: String) throws  -> AuthenticatorImportResult
    
    func importFromEnteTxt(contents: String) throws  -> AuthenticatorImportResult
    
    func importFromGoogleQr(contents: String) throws  -> AuthenticatorImportResult
    
    func importFromLastpassJson(contents: String) throws  -> AuthenticatorImportResult
    
    func importFromProtonAuthenticator(contents: String) throws  -> AuthenticatorImportResult
    
}
open class AuthenticatorImporter: AuthenticatorImporterProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_proton_authenticator_common_mobile_fn_clone_authenticatorimporter(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_proton_authenticator_common_mobile_fn_constructor_authenticatorimporter_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_proton_authenticator_common_mobile_fn_free_authenticatorimporter(pointer, $0) }
    }

    

    
open func importFrom2fas(contents: String, password: String?)throws  -> AuthenticatorImportResult  {
    return try  FfiConverterTypeAuthenticatorImportResult_lift(try rustCallWithError(FfiConverterTypeAuthenticatorImportException_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_2fas(self.uniffiClonePointer(),
        FfiConverterString.lower(contents),
        FfiConverterOptionString.lower(password),$0
    )
})
}
    
open func importFromAegisJson(contents: String, password: String?)throws  -> AuthenticatorImportResult  {
    return try  FfiConverterTypeAuthenticatorImportResult_lift(try rustCallWithError(FfiConverterTypeAuthenticatorImportException_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_aegis_json(self.uniffiClonePointer(),
        FfiConverterString.lower(contents),
        FfiConverterOptionString.lower(password),$0
    )
})
}
    
open func importFromAegisTxt(contents: String)throws  -> AuthenticatorImportResult  {
    return try  FfiConverterTypeAuthenticatorImportResult_lift(try rustCallWithError(FfiConverterTypeAuthenticatorImportException_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_aegis_txt(self.uniffiClonePointer(),
        FfiConverterString.lower(contents),$0
    )
})
}
    
open func importFromBitwardenCsv(contents: String)throws  -> AuthenticatorImportResult  {
    return try  FfiConverterTypeAuthenticatorImportResult_lift(try rustCallWithError(FfiConverterTypeAuthenticatorImportException_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_bitwarden_csv(self.uniffiClonePointer(),
        FfiConverterString.lower(contents),$0
    )
})
}
    
open func importFromBitwardenJson(contents: String)throws  -> AuthenticatorImportResult  {
    return try  FfiConverterTypeAuthenticatorImportResult_lift(try rustCallWithError(FfiConverterTypeAuthenticatorImportException_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_bitwarden_json(self.uniffiClonePointer(),
        FfiConverterString.lower(contents),$0
    )
})
}
    
open func importFromEnteTxt(contents: String)throws  -> AuthenticatorImportResult  {
    return try  FfiConverterTypeAuthenticatorImportResult_lift(try rustCallWithError(FfiConverterTypeAuthenticatorImportException_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_ente_txt(self.uniffiClonePointer(),
        FfiConverterString.lower(contents),$0
    )
})
}
    
open func importFromGoogleQr(contents: String)throws  -> AuthenticatorImportResult  {
    return try  FfiConverterTypeAuthenticatorImportResult_lift(try rustCallWithError(FfiConverterTypeAuthenticatorImportException_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_google_qr(self.uniffiClonePointer(),
        FfiConverterString.lower(contents),$0
    )
})
}
    
open func importFromLastpassJson(contents: String)throws  -> AuthenticatorImportResult  {
    return try  FfiConverterTypeAuthenticatorImportResult_lift(try rustCallWithError(FfiConverterTypeAuthenticatorImportException_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_lastpass_json(self.uniffiClonePointer(),
        FfiConverterString.lower(contents),$0
    )
})
}
    
open func importFromProtonAuthenticator(contents: String)throws  -> AuthenticatorImportResult  {
    return try  FfiConverterTypeAuthenticatorImportResult_lift(try rustCallWithError(FfiConverterTypeAuthenticatorImportException_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_proton_authenticator(self.uniffiClonePointer(),
        FfiConverterString.lower(contents),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorImporter: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthenticatorImporter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticatorImporter {
        return AuthenticatorImporter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AuthenticatorImporter) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorImporter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AuthenticatorImporter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImporter_lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticatorImporter {
    return try FfiConverterTypeAuthenticatorImporter.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImporter_lower(_ value: AuthenticatorImporter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAuthenticatorImporter.lower(value)
}






public protocol AuthenticatorMobileClientProtocol: AnyObject {
    
    func deserializeEntries(serialized: [Data]) throws  -> [AuthenticatorEntryModel]
    
    func entryFromUri(uri: String) throws  -> AuthenticatorEntryModel
    
    func exportEntries(entries: [AuthenticatorEntryModel]) throws  -> String
    
    func generateCodes(entries: [AuthenticatorEntryModel], time: UInt64) throws  -> [AuthenticatorCodeResponse]
    
    func newSteamEntryFromParams(params: AuthenticatorEntrySteamCreateParameters) throws  -> AuthenticatorEntryModel
    
    func newTotpEntryFromParams(params: AuthenticatorEntryTotpCreateParameters) throws  -> AuthenticatorEntryModel
    
    func serializeEntries(entries: [AuthenticatorEntryModel]) throws  -> [Data]
    
}
open class AuthenticatorMobileClient: AuthenticatorMobileClientProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_proton_authenticator_common_mobile_fn_clone_authenticatormobileclient(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_proton_authenticator_common_mobile_fn_constructor_authenticatormobileclient_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_proton_authenticator_common_mobile_fn_free_authenticatormobileclient(pointer, $0) }
    }

    

    
open func deserializeEntries(serialized: [Data])throws  -> [AuthenticatorEntryModel]  {
    return try  FfiConverterSequenceTypeAuthenticatorEntryModel.lift(try rustCallWithError(FfiConverterTypeAuthenticatorError__as_error_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_deserialize_entries(self.uniffiClonePointer(),
        FfiConverterSequenceData.lower(serialized),$0
    )
})
}
    
open func entryFromUri(uri: String)throws  -> AuthenticatorEntryModel  {
    return try  FfiConverterTypeAuthenticatorEntryModel_lift(try rustCallWithError(FfiConverterTypeAuthenticatorError__as_error_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_entry_from_uri(self.uniffiClonePointer(),
        FfiConverterString.lower(uri),$0
    )
})
}
    
open func exportEntries(entries: [AuthenticatorEntryModel])throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeAuthenticatorError__as_error_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_export_entries(self.uniffiClonePointer(),
        FfiConverterSequenceTypeAuthenticatorEntryModel.lower(entries),$0
    )
})
}
    
open func generateCodes(entries: [AuthenticatorEntryModel], time: UInt64)throws  -> [AuthenticatorCodeResponse]  {
    return try  FfiConverterSequenceTypeAuthenticatorCodeResponse.lift(try rustCallWithError(FfiConverterTypeAuthenticatorError__as_error_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_generate_codes(self.uniffiClonePointer(),
        FfiConverterSequenceTypeAuthenticatorEntryModel.lower(entries),
        FfiConverterUInt64.lower(time),$0
    )
})
}
    
open func newSteamEntryFromParams(params: AuthenticatorEntrySteamCreateParameters)throws  -> AuthenticatorEntryModel  {
    return try  FfiConverterTypeAuthenticatorEntryModel_lift(try rustCallWithError(FfiConverterTypeAuthenticatorError__as_error_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_new_steam_entry_from_params(self.uniffiClonePointer(),
        FfiConverterTypeAuthenticatorEntrySteamCreateParameters_lower(params),$0
    )
})
}
    
open func newTotpEntryFromParams(params: AuthenticatorEntryTotpCreateParameters)throws  -> AuthenticatorEntryModel  {
    return try  FfiConverterTypeAuthenticatorEntryModel_lift(try rustCallWithError(FfiConverterTypeAuthenticatorError__as_error_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_new_totp_entry_from_params(self.uniffiClonePointer(),
        FfiConverterTypeAuthenticatorEntryTotpCreateParameters_lower(params),$0
    )
})
}
    
open func serializeEntries(entries: [AuthenticatorEntryModel])throws  -> [Data]  {
    return try  FfiConverterSequenceData.lift(try rustCallWithError(FfiConverterTypeAuthenticatorError__as_error_lift) {
    uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_serialize_entries(self.uniffiClonePointer(),
        FfiConverterSequenceTypeAuthenticatorEntryModel.lower(entries),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorMobileClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthenticatorMobileClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticatorMobileClient {
        return AuthenticatorMobileClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AuthenticatorMobileClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorMobileClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AuthenticatorMobileClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorMobileClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticatorMobileClient {
    return try FfiConverterTypeAuthenticatorMobileClient.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorMobileClient_lower(_ value: AuthenticatorMobileClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAuthenticatorMobileClient.lower(value)
}




public struct AuthenticatorCodeResponse {
    public var currentCode: String
    public var nextCode: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(currentCode: String, nextCode: String) {
        self.currentCode = currentCode
        self.nextCode = nextCode
    }
}

#if compiler(>=6)
extension AuthenticatorCodeResponse: Sendable {}
#endif


extension AuthenticatorCodeResponse: Equatable, Hashable {
    public static func ==(lhs: AuthenticatorCodeResponse, rhs: AuthenticatorCodeResponse) -> Bool {
        if lhs.currentCode != rhs.currentCode {
            return false
        }
        if lhs.nextCode != rhs.nextCode {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(currentCode)
        hasher.combine(nextCode)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorCodeResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorCodeResponse {
        return
            try AuthenticatorCodeResponse(
                currentCode: FfiConverterString.read(from: &buf), 
                nextCode: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AuthenticatorCodeResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.currentCode, into: &buf)
        FfiConverterString.write(value.nextCode, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorCodeResponse_lift(_ buf: RustBuffer) throws -> AuthenticatorCodeResponse {
    return try FfiConverterTypeAuthenticatorCodeResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorCodeResponse_lower(_ value: AuthenticatorCodeResponse) -> RustBuffer {
    return FfiConverterTypeAuthenticatorCodeResponse.lower(value)
}


public struct AuthenticatorEntryModel {
    public var name: String
    public var uri: String
    public var period: UInt16
    public var note: String?
    public var entryType: AuthenticatorEntryType

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, uri: String, period: UInt16, note: String?, entryType: AuthenticatorEntryType) {
        self.name = name
        self.uri = uri
        self.period = period
        self.note = note
        self.entryType = entryType
    }
}

#if compiler(>=6)
extension AuthenticatorEntryModel: Sendable {}
#endif


extension AuthenticatorEntryModel: Equatable, Hashable {
    public static func ==(lhs: AuthenticatorEntryModel, rhs: AuthenticatorEntryModel) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.period != rhs.period {
            return false
        }
        if lhs.note != rhs.note {
            return false
        }
        if lhs.entryType != rhs.entryType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(uri)
        hasher.combine(period)
        hasher.combine(note)
        hasher.combine(entryType)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorEntryModel: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorEntryModel {
        return
            try AuthenticatorEntryModel(
                name: FfiConverterString.read(from: &buf), 
                uri: FfiConverterString.read(from: &buf), 
                period: FfiConverterUInt16.read(from: &buf), 
                note: FfiConverterOptionString.read(from: &buf), 
                entryType: FfiConverterTypeAuthenticatorEntryType.read(from: &buf)
        )
    }

    public static func write(_ value: AuthenticatorEntryModel, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterUInt16.write(value.period, into: &buf)
        FfiConverterOptionString.write(value.note, into: &buf)
        FfiConverterTypeAuthenticatorEntryType.write(value.entryType, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntryModel_lift(_ buf: RustBuffer) throws -> AuthenticatorEntryModel {
    return try FfiConverterTypeAuthenticatorEntryModel.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntryModel_lower(_ value: AuthenticatorEntryModel) -> RustBuffer {
    return FfiConverterTypeAuthenticatorEntryModel.lower(value)
}


public struct AuthenticatorEntrySteamCreateParameters {
    public var name: String
    public var secret: String
    public var note: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, secret: String, note: String?) {
        self.name = name
        self.secret = secret
        self.note = note
    }
}

#if compiler(>=6)
extension AuthenticatorEntrySteamCreateParameters: Sendable {}
#endif


extension AuthenticatorEntrySteamCreateParameters: Equatable, Hashable {
    public static func ==(lhs: AuthenticatorEntrySteamCreateParameters, rhs: AuthenticatorEntrySteamCreateParameters) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.secret != rhs.secret {
            return false
        }
        if lhs.note != rhs.note {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(secret)
        hasher.combine(note)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorEntrySteamCreateParameters: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorEntrySteamCreateParameters {
        return
            try AuthenticatorEntrySteamCreateParameters(
                name: FfiConverterString.read(from: &buf), 
                secret: FfiConverterString.read(from: &buf), 
                note: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: AuthenticatorEntrySteamCreateParameters, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.secret, into: &buf)
        FfiConverterOptionString.write(value.note, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntrySteamCreateParameters_lift(_ buf: RustBuffer) throws -> AuthenticatorEntrySteamCreateParameters {
    return try FfiConverterTypeAuthenticatorEntrySteamCreateParameters.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntrySteamCreateParameters_lower(_ value: AuthenticatorEntrySteamCreateParameters) -> RustBuffer {
    return FfiConverterTypeAuthenticatorEntrySteamCreateParameters.lower(value)
}


public struct AuthenticatorEntryTotpCreateParameters {
    public var name: String
    public var secret: String
    public var issuer: String?
    public var period: UInt16?
    public var digits: UInt8?
    public var algorithm: AuthenticatorTotpAlgorithm?
    public var note: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, secret: String, issuer: String?, period: UInt16?, digits: UInt8?, algorithm: AuthenticatorTotpAlgorithm?, note: String?) {
        self.name = name
        self.secret = secret
        self.issuer = issuer
        self.period = period
        self.digits = digits
        self.algorithm = algorithm
        self.note = note
    }
}

#if compiler(>=6)
extension AuthenticatorEntryTotpCreateParameters: Sendable {}
#endif


extension AuthenticatorEntryTotpCreateParameters: Equatable, Hashable {
    public static func ==(lhs: AuthenticatorEntryTotpCreateParameters, rhs: AuthenticatorEntryTotpCreateParameters) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.secret != rhs.secret {
            return false
        }
        if lhs.issuer != rhs.issuer {
            return false
        }
        if lhs.period != rhs.period {
            return false
        }
        if lhs.digits != rhs.digits {
            return false
        }
        if lhs.algorithm != rhs.algorithm {
            return false
        }
        if lhs.note != rhs.note {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(secret)
        hasher.combine(issuer)
        hasher.combine(period)
        hasher.combine(digits)
        hasher.combine(algorithm)
        hasher.combine(note)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorEntryTotpCreateParameters: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorEntryTotpCreateParameters {
        return
            try AuthenticatorEntryTotpCreateParameters(
                name: FfiConverterString.read(from: &buf), 
                secret: FfiConverterString.read(from: &buf), 
                issuer: FfiConverterOptionString.read(from: &buf), 
                period: FfiConverterOptionUInt16.read(from: &buf), 
                digits: FfiConverterOptionUInt8.read(from: &buf), 
                algorithm: FfiConverterOptionTypeAuthenticatorTotpAlgorithm.read(from: &buf), 
                note: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: AuthenticatorEntryTotpCreateParameters, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.secret, into: &buf)
        FfiConverterOptionString.write(value.issuer, into: &buf)
        FfiConverterOptionUInt16.write(value.period, into: &buf)
        FfiConverterOptionUInt8.write(value.digits, into: &buf)
        FfiConverterOptionTypeAuthenticatorTotpAlgorithm.write(value.algorithm, into: &buf)
        FfiConverterOptionString.write(value.note, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntryTotpCreateParameters_lift(_ buf: RustBuffer) throws -> AuthenticatorEntryTotpCreateParameters {
    return try FfiConverterTypeAuthenticatorEntryTotpCreateParameters.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntryTotpCreateParameters_lower(_ value: AuthenticatorEntryTotpCreateParameters) -> RustBuffer {
    return FfiConverterTypeAuthenticatorEntryTotpCreateParameters.lower(value)
}


public struct AuthenticatorImportError {
    public var context: String
    public var message: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(context: String, message: String) {
        self.context = context
        self.message = message
    }
}

#if compiler(>=6)
extension AuthenticatorImportError: Sendable {}
#endif


extension AuthenticatorImportError: Equatable, Hashable {
    public static func ==(lhs: AuthenticatorImportError, rhs: AuthenticatorImportError) -> Bool {
        if lhs.context != rhs.context {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(context)
        hasher.combine(message)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorImportError: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorImportError {
        return
            try AuthenticatorImportError(
                context: FfiConverterString.read(from: &buf), 
                message: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AuthenticatorImportError, into buf: inout [UInt8]) {
        FfiConverterString.write(value.context, into: &buf)
        FfiConverterString.write(value.message, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImportError_lift(_ buf: RustBuffer) throws -> AuthenticatorImportError {
    return try FfiConverterTypeAuthenticatorImportError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImportError_lower(_ value: AuthenticatorImportError) -> RustBuffer {
    return FfiConverterTypeAuthenticatorImportError.lower(value)
}


public struct AuthenticatorImportResult {
    public var entries: [AuthenticatorEntryModel]
    public var errors: [AuthenticatorImportError]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(entries: [AuthenticatorEntryModel], errors: [AuthenticatorImportError]) {
        self.entries = entries
        self.errors = errors
    }
}

#if compiler(>=6)
extension AuthenticatorImportResult: Sendable {}
#endif


extension AuthenticatorImportResult: Equatable, Hashable {
    public static func ==(lhs: AuthenticatorImportResult, rhs: AuthenticatorImportResult) -> Bool {
        if lhs.entries != rhs.entries {
            return false
        }
        if lhs.errors != rhs.errors {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(entries)
        hasher.combine(errors)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorImportResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorImportResult {
        return
            try AuthenticatorImportResult(
                entries: FfiConverterSequenceTypeAuthenticatorEntryModel.read(from: &buf), 
                errors: FfiConverterSequenceTypeAuthenticatorImportError.read(from: &buf)
        )
    }

    public static func write(_ value: AuthenticatorImportResult, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeAuthenticatorEntryModel.write(value.entries, into: &buf)
        FfiConverterSequenceTypeAuthenticatorImportError.write(value.errors, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImportResult_lift(_ buf: RustBuffer) throws -> AuthenticatorImportResult {
    return try FfiConverterTypeAuthenticatorImportResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImportResult_lower(_ value: AuthenticatorImportResult) -> RustBuffer {
    return FfiConverterTypeAuthenticatorImportResult.lower(value)
}


public enum AuthenticatorCryptoError {

    
    
    case CryptoError(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorCryptoError: FfiConverterRustBuffer {
    typealias SwiftType = AuthenticatorCryptoError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorCryptoError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .CryptoError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AuthenticatorCryptoError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .CryptoError(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorCryptoError_lift(_ buf: RustBuffer) throws -> AuthenticatorCryptoError {
    return try FfiConverterTypeAuthenticatorCryptoError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorCryptoError_lower(_ value: AuthenticatorCryptoError) -> RustBuffer {
    return FfiConverterTypeAuthenticatorCryptoError.lower(value)
}


extension AuthenticatorCryptoError: Equatable, Hashable {}



extension AuthenticatorCryptoError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AuthenticatorEntryType {
    
    case totp
    case steam
}


#if compiler(>=6)
extension AuthenticatorEntryType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorEntryType: FfiConverterRustBuffer {
    typealias SwiftType = AuthenticatorEntryType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorEntryType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .totp
        
        case 2: return .steam
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AuthenticatorEntryType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .totp:
            writeInt(&buf, Int32(1))
        
        
        case .steam:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntryType_lift(_ buf: RustBuffer) throws -> AuthenticatorEntryType {
    return try FfiConverterTypeAuthenticatorEntryType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntryType_lower(_ value: AuthenticatorEntryType) -> RustBuffer {
    return FfiConverterTypeAuthenticatorEntryType.lower(value)
}


extension AuthenticatorEntryType: Equatable, Hashable {}




public enum AuthenticatorImportException {

    
    
    case BadContent(message: String)
    
    case BadPassword(message: String)
    
    case MissingPassword(message: String)
    
    case DecryptionFailed(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorImportException: FfiConverterRustBuffer {
    typealias SwiftType = AuthenticatorImportException

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorImportException {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .BadContent(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .BadPassword(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .MissingPassword(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .DecryptionFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AuthenticatorImportException, into buf: inout [UInt8]) {
        switch value {

        

        
        case .BadContent(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .BadPassword(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .MissingPassword(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .DecryptionFailed(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImportException_lift(_ buf: RustBuffer) throws -> AuthenticatorImportException {
    return try FfiConverterTypeAuthenticatorImportException.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImportException_lower(_ value: AuthenticatorImportException) -> RustBuffer {
    return FfiConverterTypeAuthenticatorImportException.lower(value)
}


extension AuthenticatorImportException: Equatable, Hashable {}



extension AuthenticatorImportException: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AuthenticatorTotpAlgorithm {
    
    case sha1
    case sha256
    case sha512
}


#if compiler(>=6)
extension AuthenticatorTotpAlgorithm: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorTotpAlgorithm: FfiConverterRustBuffer {
    typealias SwiftType = AuthenticatorTotpAlgorithm

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorTotpAlgorithm {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .sha1
        
        case 2: return .sha256
        
        case 3: return .sha512
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AuthenticatorTotpAlgorithm, into buf: inout [UInt8]) {
        switch value {
        
        
        case .sha1:
            writeInt(&buf, Int32(1))
        
        
        case .sha256:
            writeInt(&buf, Int32(2))
        
        
        case .sha512:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorTotpAlgorithm_lift(_ buf: RustBuffer) throws -> AuthenticatorTotpAlgorithm {
    return try FfiConverterTypeAuthenticatorTotpAlgorithm.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorTotpAlgorithm_lower(_ value: AuthenticatorTotpAlgorithm) -> RustBuffer {
    return FfiConverterTypeAuthenticatorTotpAlgorithm.lower(value)
}


extension AuthenticatorTotpAlgorithm: Equatable, Hashable {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt8: FfiConverterRustBuffer {
    typealias SwiftType = UInt8?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAuthenticatorTotpAlgorithm: FfiConverterRustBuffer {
    typealias SwiftType = AuthenticatorTotpAlgorithm?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAuthenticatorTotpAlgorithm.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAuthenticatorTotpAlgorithm.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceData: FfiConverterRustBuffer {
    typealias SwiftType = [Data]

    public static func write(_ value: [Data], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterData.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Data] {
        let len: Int32 = try readInt(&buf)
        var seq = [Data]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterData.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAuthenticatorCodeResponse: FfiConverterRustBuffer {
    typealias SwiftType = [AuthenticatorCodeResponse]

    public static func write(_ value: [AuthenticatorCodeResponse], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAuthenticatorCodeResponse.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AuthenticatorCodeResponse] {
        let len: Int32 = try readInt(&buf)
        var seq = [AuthenticatorCodeResponse]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAuthenticatorCodeResponse.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAuthenticatorEntryModel: FfiConverterRustBuffer {
    typealias SwiftType = [AuthenticatorEntryModel]

    public static func write(_ value: [AuthenticatorEntryModel], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAuthenticatorEntryModel.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AuthenticatorEntryModel] {
        let len: Int32 = try readInt(&buf)
        var seq = [AuthenticatorEntryModel]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAuthenticatorEntryModel.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAuthenticatorImportError: FfiConverterRustBuffer {
    typealias SwiftType = [AuthenticatorImportError]

    public static func write(_ value: [AuthenticatorImportError], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAuthenticatorImportError.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AuthenticatorImportError] {
        let len: Int32 = try readInt(&buf)
        var seq = [AuthenticatorImportError]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAuthenticatorImportError.read(from: &buf))
        }
        return seq
    }
}
public func libraryVersion() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_proton_authenticator_common_mobile_fn_func_library_version($0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_proton_authenticator_common_mobile_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_func_library_version() != 16647) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorcrypto_decrypt_entry() != 21438) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorcrypto_decrypt_many_entries() != 41489) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorcrypto_encrypt_entry() != 64217) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorcrypto_encrypt_many_entries() != 45111) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorcrypto_generate_key() != 11780) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorerror_message() != 43994) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_2fas() != 43563) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_aegis_json() != 6942) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_aegis_txt() != 38459) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_bitwarden_csv() != 44378) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_bitwarden_json() != 53330) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_ente_txt() != 62264) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_google_qr() != 19900) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_lastpass_json() != 59647) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_proton_authenticator() != 43905) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_deserialize_entries() != 37808) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_entry_from_uri() != 5714) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_export_entries() != 5906) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_generate_codes() != 51132) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_new_steam_entry_from_params() != 1987) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_new_totp_entry_from_params() != 4121) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_serialize_entries() != 42768) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_constructor_authenticatorcrypto_new() != 57379) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_constructor_authenticatorimporter_new() != 37417) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_authenticator_common_mobile_checksum_constructor_authenticatormobileclient_new() != 45355) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureProtonAuthenticatorCommonMobileInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all