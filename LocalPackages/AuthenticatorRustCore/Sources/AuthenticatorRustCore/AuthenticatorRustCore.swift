// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(RustFrameworkFFI)
import RustFrameworkFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall {
            ffi_proton_authenticator_common_mobile_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr),
                                                                         $0)
        }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_proton_authenticator_common_mobile_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(bytesNoCopy: rustBuffer.data!,
                  count: Int(rustBuffer.len),
                  deallocator: .none)
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset..<(reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    []
}

private func writeBytes(_ writer: inout [UInt8], _ byteArr: some Sequence<UInt8>) {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt(_ writer: inout [UInt8], _ value: some FixedWidthInteger) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        value
    }

    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> FfiType {
        value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: "Reading the requested value would read past the end of the buffer"
        case .incompleteData: "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: "The object in the handle map has been dropped already"
        case let .rustPanic(message): message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(code: CALL_SUCCESS,
                  errorBuf: RustBuffer(capacity: 0,
                                       len: 0,
                                       data: nil))
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T>(_ errorHandler: @escaping (RustBuffer) throws -> some Swift.Error,
                                  _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
                             errorHandler: ((RustBuffer) throws -> some Swift.Error)?) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(callStatus: RustCallStatus,
                                   errorHandler: ((RustBuffer) throws -> some Swift.Error)?) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(callStatus: UnsafeMutablePointer<RustCallStatus>,
                                         makeCall: () throws -> T,
                                         writeReturn: (T) -> Void) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(callStatus: UnsafeMutablePointer<RustCallStatus>,
                                                     makeCall: () throws -> T,
                                                     writeReturn: (T) -> Void,
                                                     lowerError: (E) -> RustBuffer) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public protocol AuthenticatorEntryActionsProtocol: AnyObject {
    func entryType() -> String

    func generateCode(time: UInt64) throws -> AuthenticatorCodeResponse

    func serialize() throws -> Data
}

open class AuthenticatorEntryActions:
    AuthenticatorEntryActionsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one
    // that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since
    //     there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        try! rustCall { uniffi_proton_authenticator_common_mobile_fn_clone_authenticatorentryactions(self.pointer,
                                                                                                     $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer else {
            return
        }

        try! rustCall { uniffi_proton_authenticator_common_mobile_fn_free_authenticatorentryactions(pointer, $0) }
    }

    open func entryType() -> String {
        try! FfiConverterString.lift(try! rustCall {
            uniffi_proton_authenticator_common_mobile_fn_method_authenticatorentryactions_entry_type(self
                .uniffiClonePointer(),
                $0)
        })
    }

    open func generateCode(time: UInt64) throws -> AuthenticatorCodeResponse {
        try FfiConverterTypeAuthenticatorCodeResponse
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorError__as_error.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatorentryactions_generate_code(self
                    .uniffiClonePointer(),
                    FfiConverterUInt64
                        .lower(time),
                    $0)
            })
    }

    open func serialize() throws -> Data {
        try FfiConverterData.lift(rustCallWithError(FfiConverterTypeAuthenticatorError__as_error.lift) {
            uniffi_proton_authenticator_common_mobile_fn_method_authenticatorentryactions_serialize(self
                .uniffiClonePointer(),
                $0)
        })
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorEntryActions: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthenticatorEntryActions

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticatorEntryActions {
        AuthenticatorEntryActions(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AuthenticatorEntryActions) -> UnsafeMutableRawPointer {
        value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorEntryActions {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AuthenticatorEntryActions, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntryActions_lift(_ pointer: UnsafeMutableRawPointer) throws
    -> AuthenticatorEntryActions {
    try FfiConverterTypeAuthenticatorEntryActions.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntryActions_lower(_ value: AuthenticatorEntryActions)
    -> UnsafeMutableRawPointer {
    FfiConverterTypeAuthenticatorEntryActions.lower(value)
}

public protocol AuthenticatorErrorProtocol: AnyObject {
    func message() -> String
}

open class AuthenticatorError:
    CustomDebugStringConvertible,
    Swift.Error,

    AuthenticatorErrorProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one
    // that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since
    //     there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        try! rustCall { uniffi_proton_authenticator_common_mobile_fn_clone_authenticatorerror(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer else {
            return
        }

        try! rustCall { uniffi_proton_authenticator_common_mobile_fn_free_authenticatorerror(pointer, $0) }
    }

    open func message() -> String {
        try! FfiConverterString.lift(try! rustCall {
            uniffi_proton_authenticator_common_mobile_fn_method_authenticatorerror_message(self
                .uniffiClonePointer(),
                $0)
        })
    }

    open var debugDescription: String {
        try! FfiConverterString.lift(try! rustCall {
            uniffi_proton_authenticator_common_mobile_fn_method_authenticatorerror_uniffi_trait_debug(self
                .uniffiClonePointer(),
                $0)
        })
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorError: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthenticatorError

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticatorError {
        AuthenticatorError(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AuthenticatorError) -> UnsafeMutableRawPointer {
        value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorError {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AuthenticatorError, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

extension AuthenticatorError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorError__as_error: FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> AuthenticatorError {
        var reader = createReader(data: Data(rustBuffer: buf))
        return try FfiConverterTypeAuthenticatorError.read(from: &reader)
    }

    public static func lower(_: AuthenticatorError) -> RustBuffer {
        fatalError("not implemented")
    }

    public static func read(from _: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorError {
        fatalError("not implemented")
    }

    public static func write(_: AuthenticatorError, into _: inout [UInt8]) {
        fatalError("not implemented")
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorError_lift(_ pointer: UnsafeMutableRawPointer) throws
    -> AuthenticatorError {
    try FfiConverterTypeAuthenticatorError.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorError_lower(_ value: AuthenticatorError) -> UnsafeMutableRawPointer {
    FfiConverterTypeAuthenticatorError.lower(value)
}

public protocol AuthenticatorImporterProtocol: AnyObject {
    func importFrom2fas(contents: String, password: String?) throws -> AuthenticatorImportResult

    func importFromAegisJson(contents: String, password: String?) throws -> AuthenticatorImportResult

    func importFromAegisTxt(contents: String) throws -> AuthenticatorImportResult

    func importFromBitwardenCsv(contents: String) throws -> AuthenticatorImportResult

    func importFromBitwardenJson(contents: String) throws -> AuthenticatorImportResult

    func importFromEnteTxt(contents: String) throws -> AuthenticatorImportResult

    func importFromGoogleQr(contents: String) throws -> AuthenticatorImportResult

    func importFromLastpassJson(contents: String) throws -> AuthenticatorImportResult

    func importFromProtonAuthenticator(contents: String) throws -> AuthenticatorImportResult
}

open class AuthenticatorImporter:
    AuthenticatorImporterProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one
    // that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since
    //     there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        try! rustCall { uniffi_proton_authenticator_common_mobile_fn_clone_authenticatorimporter(self.pointer, $0)
        }
    }

    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_proton_authenticator_common_mobile_fn_constructor_authenticatorimporter_new($0)
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer else {
            return
        }

        try! rustCall { uniffi_proton_authenticator_common_mobile_fn_free_authenticatorimporter(pointer, $0) }
    }

    open func importFrom2fas(contents: String, password: String?) throws -> AuthenticatorImportResult {
        try FfiConverterTypeAuthenticatorImportResult
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorImportException.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_2fas(self
                    .uniffiClonePointer(),
                    FfiConverterString
                        .lower(contents),
                    FfiConverterOptionString
                        .lower(password),
                    $0)
            })
    }

    open func importFromAegisJson(contents: String, password: String?) throws -> AuthenticatorImportResult {
        try FfiConverterTypeAuthenticatorImportResult
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorImportException.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_aegis_json(self
                    .uniffiClonePointer(),
                    FfiConverterString
                        .lower(contents),
                    FfiConverterOptionString
                        .lower(password),
                    $0)
            })
    }

    open func importFromAegisTxt(contents: String) throws -> AuthenticatorImportResult {
        try FfiConverterTypeAuthenticatorImportResult
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorImportException.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_aegis_txt(self
                    .uniffiClonePointer(),
                    FfiConverterString
                        .lower(contents),
                    $0)
            })
    }

    open func importFromBitwardenCsv(contents: String) throws -> AuthenticatorImportResult {
        try FfiConverterTypeAuthenticatorImportResult
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorImportException.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_bitwarden_csv(self
                    .uniffiClonePointer(),
                    FfiConverterString
                        .lower(contents),
                    $0)
            })
    }

    open func importFromBitwardenJson(contents: String) throws -> AuthenticatorImportResult {
        try FfiConverterTypeAuthenticatorImportResult
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorImportException.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_bitwarden_json(self
                    .uniffiClonePointer(),
                    FfiConverterString
                        .lower(contents),
                    $0)
            })
    }

    open func importFromEnteTxt(contents: String) throws -> AuthenticatorImportResult {
        try FfiConverterTypeAuthenticatorImportResult
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorImportException.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_ente_txt(self
                    .uniffiClonePointer(),
                    FfiConverterString
                        .lower(contents),
                    $0)
            })
    }

    open func importFromGoogleQr(contents: String) throws -> AuthenticatorImportResult {
        try FfiConverterTypeAuthenticatorImportResult
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorImportException.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_google_qr(self
                    .uniffiClonePointer(),
                    FfiConverterString
                        .lower(contents),
                    $0)
            })
    }

    open func importFromLastpassJson(contents: String) throws -> AuthenticatorImportResult {
        try FfiConverterTypeAuthenticatorImportResult
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorImportException.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_lastpass_json(self
                    .uniffiClonePointer(),
                    FfiConverterString
                        .lower(contents),
                    $0)
            })
    }

    open func importFromProtonAuthenticator(contents: String) throws -> AuthenticatorImportResult {
        try FfiConverterTypeAuthenticatorImportResult
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorImportException.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatorimporter_import_from_proton_authenticator(self
                    .uniffiClonePointer(),
                    FfiConverterString
                        .lower(contents),
                    $0)
            })
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorImporter: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthenticatorImporter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticatorImporter {
        AuthenticatorImporter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AuthenticatorImporter) -> UnsafeMutableRawPointer {
        value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorImporter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AuthenticatorImporter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImporter_lift(_ pointer: UnsafeMutableRawPointer) throws
    -> AuthenticatorImporter {
    try FfiConverterTypeAuthenticatorImporter.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImporter_lower(_ value: AuthenticatorImporter)
    -> UnsafeMutableRawPointer {
    FfiConverterTypeAuthenticatorImporter.lower(value)
}

public protocol AuthenticatorMobileClientProtocol: AnyObject {
    func deserializeEntries(serialized: [Data]) throws -> [AuthenticatorEntryModel]

    func entryFromUri(uri: String) throws -> AuthenticatorEntryModel

    func exportEntries(entries: [AuthenticatorEntryModel]) throws -> String

    func generateCodes(entries: [AuthenticatorEntryModel], time: UInt64) throws -> [AuthenticatorCodeResponse]

    func newSteamEntryFromParams(params: AuthenticatorEntrySteamCreateParameters) throws -> AuthenticatorEntryModel

    func newTotpEntryFromParams(params: AuthenticatorEntryTotpCreateParameters) throws -> AuthenticatorEntryModel

    func serializeEntries(entries: [AuthenticatorEntryModel]) throws -> [Data]
}

open class AuthenticatorMobileClient:
    AuthenticatorMobileClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one
    // that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since
    //     there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
    @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        try! rustCall { uniffi_proton_authenticator_common_mobile_fn_clone_authenticatormobileclient(self.pointer,
                                                                                                     $0) }
    }

    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_proton_authenticator_common_mobile_fn_constructor_authenticatormobileclient_new($0)
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer else {
            return
        }

        try! rustCall { uniffi_proton_authenticator_common_mobile_fn_free_authenticatormobileclient(pointer, $0) }
    }

    open func deserializeEntries(serialized: [Data]) throws -> [AuthenticatorEntryModel] {
        try FfiConverterSequenceTypeAuthenticatorEntryModel
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorError__as_error.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_deserialize_entries(self
                    .uniffiClonePointer(),
                    FfiConverterSequenceData
                        .lower(serialized),
                    $0)
            })
    }

    open func entryFromUri(uri: String) throws -> AuthenticatorEntryModel {
        try FfiConverterTypeAuthenticatorEntryModel
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorError__as_error.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_entry_from_uri(self
                    .uniffiClonePointer(),
                    FfiConverterString
                        .lower(uri),
                    $0)
            })
    }

    open func exportEntries(entries: [AuthenticatorEntryModel]) throws -> String {
        try FfiConverterString.lift(rustCallWithError(FfiConverterTypeAuthenticatorError__as_error.lift) {
            uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_export_entries(self
                .uniffiClonePointer(),
                FfiConverterSequenceTypeAuthenticatorEntryModel
                    .lower(entries),
                $0)
        })
    }

    open func generateCodes(entries: [AuthenticatorEntryModel],
                            time: UInt64) throws -> [AuthenticatorCodeResponse] {
        try FfiConverterSequenceTypeAuthenticatorCodeResponse
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorError__as_error.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_generate_codes(self
                    .uniffiClonePointer(),
                    FfiConverterSequenceTypeAuthenticatorEntryModel
                        .lower(entries),
                    FfiConverterUInt64
                        .lower(time),
                    $0)
            })
    }

    open func newSteamEntryFromParams(params: AuthenticatorEntrySteamCreateParameters) throws
        -> AuthenticatorEntryModel {
        try FfiConverterTypeAuthenticatorEntryModel
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorError__as_error.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_new_steam_entry_from_params(self
                    .uniffiClonePointer(),
                    FfiConverterTypeAuthenticatorEntrySteamCreateParameters
                        .lower(params),
                    $0)
            })
    }

    open func newTotpEntryFromParams(params: AuthenticatorEntryTotpCreateParameters) throws
        -> AuthenticatorEntryModel {
        try FfiConverterTypeAuthenticatorEntryModel
            .lift(rustCallWithError(FfiConverterTypeAuthenticatorError__as_error.lift) {
                uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_new_totp_entry_from_params(self
                    .uniffiClonePointer(),
                    FfiConverterTypeAuthenticatorEntryTotpCreateParameters
                        .lower(params),
                    $0)
            })
    }

    open func serializeEntries(entries: [AuthenticatorEntryModel]) throws -> [Data] {
        try FfiConverterSequenceData.lift(rustCallWithError(FfiConverterTypeAuthenticatorError__as_error.lift) {
            uniffi_proton_authenticator_common_mobile_fn_method_authenticatormobileclient_serialize_entries(self
                .uniffiClonePointer(),
                FfiConverterSequenceTypeAuthenticatorEntryModel
                    .lower(entries),
                $0)
        })
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorMobileClient: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthenticatorMobileClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthenticatorMobileClient {
        AuthenticatorMobileClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AuthenticatorMobileClient) -> UnsafeMutableRawPointer {
        value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorMobileClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AuthenticatorMobileClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorMobileClient_lift(_ pointer: UnsafeMutableRawPointer) throws
    -> AuthenticatorMobileClient {
    try FfiConverterTypeAuthenticatorMobileClient.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorMobileClient_lower(_ value: AuthenticatorMobileClient)
    -> UnsafeMutableRawPointer {
    FfiConverterTypeAuthenticatorMobileClient.lower(value)
}

public struct AuthenticatorCodeResponse {
    public var currentCode: String
    public var nextCode: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(currentCode: String, nextCode: String) {
        self.currentCode = currentCode
        self.nextCode = nextCode
    }
}

extension AuthenticatorCodeResponse: Equatable, Hashable {
    public static func == (lhs: AuthenticatorCodeResponse, rhs: AuthenticatorCodeResponse) -> Bool {
        if lhs.currentCode != rhs.currentCode {
            return false
        }
        if lhs.nextCode != rhs.nextCode {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(currentCode)
        hasher.combine(nextCode)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorCodeResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorCodeResponse {
        try AuthenticatorCodeResponse(currentCode: FfiConverterString.read(from: &buf),
                                      nextCode: FfiConverterString.read(from: &buf))
    }

    public static func write(_ value: AuthenticatorCodeResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.currentCode, into: &buf)
        FfiConverterString.write(value.nextCode, into: &buf)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorCodeResponse_lift(_ buf: RustBuffer) throws -> AuthenticatorCodeResponse {
    try FfiConverterTypeAuthenticatorCodeResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorCodeResponse_lower(_ value: AuthenticatorCodeResponse) -> RustBuffer {
    FfiConverterTypeAuthenticatorCodeResponse.lower(value)
}

public struct AuthenticatorEntryModel {
    public var name: String
    public var uri: String
    public var period: UInt16
    public var note: String?
    public var actions: AuthenticatorEntryActions

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, uri: String, period: UInt16, note: String?, actions: AuthenticatorEntryActions) {
        self.name = name
        self.uri = uri
        self.period = period
        self.note = note
        self.actions = actions
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorEntryModel: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorEntryModel {
        try AuthenticatorEntryModel(name: FfiConverterString.read(from: &buf),
                                    uri: FfiConverterString.read(from: &buf),
                                    period: FfiConverterUInt16.read(from: &buf),
                                    note: FfiConverterOptionString.read(from: &buf),
                                    actions: FfiConverterTypeAuthenticatorEntryActions.read(from: &buf))
    }

    public static func write(_ value: AuthenticatorEntryModel, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterUInt16.write(value.period, into: &buf)
        FfiConverterOptionString.write(value.note, into: &buf)
        FfiConverterTypeAuthenticatorEntryActions.write(value.actions, into: &buf)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntryModel_lift(_ buf: RustBuffer) throws -> AuthenticatorEntryModel {
    try FfiConverterTypeAuthenticatorEntryModel.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntryModel_lower(_ value: AuthenticatorEntryModel) -> RustBuffer {
    FfiConverterTypeAuthenticatorEntryModel.lower(value)
}

public struct AuthenticatorEntrySteamCreateParameters {
    public var name: String
    public var secret: String
    public var note: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, secret: String, note: String?) {
        self.name = name
        self.secret = secret
        self.note = note
    }
}

extension AuthenticatorEntrySteamCreateParameters: Equatable, Hashable {
    public static func == (lhs: AuthenticatorEntrySteamCreateParameters,
                           rhs: AuthenticatorEntrySteamCreateParameters) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.secret != rhs.secret {
            return false
        }
        if lhs.note != rhs.note {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(secret)
        hasher.combine(note)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorEntrySteamCreateParameters: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws
        -> AuthenticatorEntrySteamCreateParameters {
        try AuthenticatorEntrySteamCreateParameters(name: FfiConverterString.read(from: &buf),
                                                    secret: FfiConverterString.read(from: &buf),
                                                    note: FfiConverterOptionString.read(from: &buf))
    }

    public static func write(_ value: AuthenticatorEntrySteamCreateParameters, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.secret, into: &buf)
        FfiConverterOptionString.write(value.note, into: &buf)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntrySteamCreateParameters_lift(_ buf: RustBuffer) throws
    -> AuthenticatorEntrySteamCreateParameters {
    try FfiConverterTypeAuthenticatorEntrySteamCreateParameters.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntrySteamCreateParameters_lower(_ value: AuthenticatorEntrySteamCreateParameters)
    -> RustBuffer {
    FfiConverterTypeAuthenticatorEntrySteamCreateParameters.lower(value)
}

public struct AuthenticatorEntryTotpCreateParameters {
    public var name: String
    public var secret: String
    public var issuer: String?
    public var period: UInt16?
    public var digits: UInt8?
    public var algorithm: AuthenticatorTotpAlgorithm?
    public var note: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, secret: String, issuer: String?, period: UInt16?, digits: UInt8?,
                algorithm: AuthenticatorTotpAlgorithm?, note: String?) {
        self.name = name
        self.secret = secret
        self.issuer = issuer
        self.period = period
        self.digits = digits
        self.algorithm = algorithm
        self.note = note
    }
}

extension AuthenticatorEntryTotpCreateParameters: Equatable, Hashable {
    public static func == (lhs: AuthenticatorEntryTotpCreateParameters,
                           rhs: AuthenticatorEntryTotpCreateParameters) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.secret != rhs.secret {
            return false
        }
        if lhs.issuer != rhs.issuer {
            return false
        }
        if lhs.period != rhs.period {
            return false
        }
        if lhs.digits != rhs.digits {
            return false
        }
        if lhs.algorithm != rhs.algorithm {
            return false
        }
        if lhs.note != rhs.note {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(secret)
        hasher.combine(issuer)
        hasher.combine(period)
        hasher.combine(digits)
        hasher.combine(algorithm)
        hasher.combine(note)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorEntryTotpCreateParameters: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws
        -> AuthenticatorEntryTotpCreateParameters {
        try AuthenticatorEntryTotpCreateParameters(name: FfiConverterString.read(from: &buf),
                                                   secret: FfiConverterString.read(from: &buf),
                                                   issuer: FfiConverterOptionString.read(from: &buf),
                                                   period: FfiConverterOptionUInt16.read(from: &buf),
                                                   digits: FfiConverterOptionUInt8.read(from: &buf),
                                                   algorithm: FfiConverterOptionTypeAuthenticatorTotpAlgorithm
                                                       .read(from: &buf),
                                                   note: FfiConverterOptionString.read(from: &buf))
    }

    public static func write(_ value: AuthenticatorEntryTotpCreateParameters, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.secret, into: &buf)
        FfiConverterOptionString.write(value.issuer, into: &buf)
        FfiConverterOptionUInt16.write(value.period, into: &buf)
        FfiConverterOptionUInt8.write(value.digits, into: &buf)
        FfiConverterOptionTypeAuthenticatorTotpAlgorithm.write(value.algorithm, into: &buf)
        FfiConverterOptionString.write(value.note, into: &buf)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntryTotpCreateParameters_lift(_ buf: RustBuffer) throws
    -> AuthenticatorEntryTotpCreateParameters {
    try FfiConverterTypeAuthenticatorEntryTotpCreateParameters.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorEntryTotpCreateParameters_lower(_ value: AuthenticatorEntryTotpCreateParameters)
    -> RustBuffer {
    FfiConverterTypeAuthenticatorEntryTotpCreateParameters.lower(value)
}

public struct AuthenticatorImportError {
    public var context: String
    public var message: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(context: String, message: String) {
        self.context = context
        self.message = message
    }
}

extension AuthenticatorImportError: Equatable, Hashable {
    public static func == (lhs: AuthenticatorImportError, rhs: AuthenticatorImportError) -> Bool {
        if lhs.context != rhs.context {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(context)
        hasher.combine(message)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorImportError: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorImportError {
        try AuthenticatorImportError(context: FfiConverterString.read(from: &buf),
                                     message: FfiConverterString.read(from: &buf))
    }

    public static func write(_ value: AuthenticatorImportError, into buf: inout [UInt8]) {
        FfiConverterString.write(value.context, into: &buf)
        FfiConverterString.write(value.message, into: &buf)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImportError_lift(_ buf: RustBuffer) throws -> AuthenticatorImportError {
    try FfiConverterTypeAuthenticatorImportError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImportError_lower(_ value: AuthenticatorImportError) -> RustBuffer {
    FfiConverterTypeAuthenticatorImportError.lower(value)
}

public struct AuthenticatorImportResult {
    public var entries: [AuthenticatorEntryModel]
    public var errors: [AuthenticatorImportError]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(entries: [AuthenticatorEntryModel], errors: [AuthenticatorImportError]) {
        self.entries = entries
        self.errors = errors
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorImportResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorImportResult {
        try AuthenticatorImportResult(entries: FfiConverterSequenceTypeAuthenticatorEntryModel.read(from: &buf),
                                      errors: FfiConverterSequenceTypeAuthenticatorImportError.read(from: &buf))
    }

    public static func write(_ value: AuthenticatorImportResult, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeAuthenticatorEntryModel.write(value.entries, into: &buf)
        FfiConverterSequenceTypeAuthenticatorImportError.write(value.errors, into: &buf)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImportResult_lift(_ buf: RustBuffer) throws -> AuthenticatorImportResult {
    try FfiConverterTypeAuthenticatorImportResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorImportResult_lower(_ value: AuthenticatorImportResult) -> RustBuffer {
    FfiConverterTypeAuthenticatorImportResult.lower(value)
}

public enum AuthenticatorImportException {
    case BadContent(message: String)

    case BadPassword(message: String)

    case MissingPassword(message: String)

    case DecryptionFailed(message: String)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorImportException: FfiConverterRustBuffer {
    typealias SwiftType = AuthenticatorImportException

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws
        -> AuthenticatorImportException {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .BadContent(message: FfiConverterString.read(from: &buf))

        case 2: return try .BadPassword(message: FfiConverterString.read(from: &buf))

        case 3: return try .MissingPassword(message: FfiConverterString.read(from: &buf))

        case 4: return try .DecryptionFailed(message: FfiConverterString.read(from: &buf))

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AuthenticatorImportException, into buf: inout [UInt8]) {
        switch value {
        case .BadContent(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .BadPassword(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        case .MissingPassword(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(3))
        case .DecryptionFailed(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(4))
        }
    }
}

extension AuthenticatorImportException: Equatable, Hashable {}

extension AuthenticatorImportException: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum AuthenticatorTotpAlgorithm {
    case sha1
    case sha256
    case sha512
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAuthenticatorTotpAlgorithm: FfiConverterRustBuffer {
    typealias SwiftType = AuthenticatorTotpAlgorithm

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws
        -> AuthenticatorTotpAlgorithm {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .sha1

        case 2: return .sha256

        case 3: return .sha512

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AuthenticatorTotpAlgorithm, into buf: inout [UInt8]) {
        switch value {
        case .sha1:
            writeInt(&buf, Int32(1))

        case .sha256:
            writeInt(&buf, Int32(2))

        case .sha512:
            writeInt(&buf, Int32(3))
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorTotpAlgorithm_lift(_ buf: RustBuffer) throws
    -> AuthenticatorTotpAlgorithm {
    try FfiConverterTypeAuthenticatorTotpAlgorithm.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAuthenticatorTotpAlgorithm_lower(_ value: AuthenticatorTotpAlgorithm) -> RustBuffer {
    FfiConverterTypeAuthenticatorTotpAlgorithm.lower(value)
}

extension AuthenticatorTotpAlgorithm: Equatable, Hashable {}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterOptionUInt8: FfiConverterRustBuffer {
    typealias SwiftType = UInt8?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeAuthenticatorTotpAlgorithm: FfiConverterRustBuffer {
    typealias SwiftType = AuthenticatorTotpAlgorithm?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAuthenticatorTotpAlgorithm.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAuthenticatorTotpAlgorithm.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterSequenceData: FfiConverterRustBuffer {
    typealias SwiftType = [Data]

    public static func write(_ value: [Data], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterData.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Data] {
        let len: Int32 = try readInt(&buf)
        var seq = [Data]()
        seq.reserveCapacity(Int(len))
        for _ in 0..<len {
            try seq.append(FfiConverterData.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeAuthenticatorCodeResponse: FfiConverterRustBuffer {
    typealias SwiftType = [AuthenticatorCodeResponse]

    public static func write(_ value: [AuthenticatorCodeResponse], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAuthenticatorCodeResponse.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws
        -> [AuthenticatorCodeResponse] {
        let len: Int32 = try readInt(&buf)
        var seq = [AuthenticatorCodeResponse]()
        seq.reserveCapacity(Int(len))
        for _ in 0..<len {
            try seq.append(FfiConverterTypeAuthenticatorCodeResponse.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeAuthenticatorEntryModel: FfiConverterRustBuffer {
    typealias SwiftType = [AuthenticatorEntryModel]

    public static func write(_ value: [AuthenticatorEntryModel], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAuthenticatorEntryModel.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AuthenticatorEntryModel] {
        let len: Int32 = try readInt(&buf)
        var seq = [AuthenticatorEntryModel]()
        seq.reserveCapacity(Int(len))
        for _ in 0..<len {
            try seq.append(FfiConverterTypeAuthenticatorEntryModel.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeAuthenticatorImportError: FfiConverterRustBuffer {
    typealias SwiftType = [AuthenticatorImportError]

    public static func write(_ value: [AuthenticatorImportError], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAuthenticatorImportError.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws
        -> [AuthenticatorImportError] {
        let len: Int32 = try readInt(&buf)
        var seq = [AuthenticatorImportError]()
        seq.reserveCapacity(Int(len))
        for _ in 0..<len {
            try seq.append(FfiConverterTypeAuthenticatorImportError.read(from: &buf))
        }
        return seq
    }
}

public func libraryVersion() -> String {
    try! FfiConverterString.lift(try! rustCall {
        uniffi_proton_authenticator_common_mobile_fn_func_library_version($0)
    })
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_proton_authenticator_common_mobile_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_func_library_version() != 16_647 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorentryactions_entry_type() != 43_624 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorentryactions_generate_code() !=
        63_537 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorentryactions_serialize() != 36_911 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorerror_message() != 43_994 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_2fas() !=
        43_563 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_aegis_json() !=
        6_942 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_aegis_txt() !=
        38_459 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_bitwarden_csv() !=
        44_378 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_bitwarden_json() !=
        53_330 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_ente_txt() !=
        62_264 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_google_qr() !=
        19_900 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_lastpass_json() !=
        59_647 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatorimporter_import_from_proton_authenticator() !=
        43_905 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_deserialize_entries() !=
        37_808 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_entry_from_uri() !=
        5_714 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_export_entries() !=
        5_906 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_generate_codes() !=
        51_132 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_new_steam_entry_from_params() !=
        1_987 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_new_totp_entry_from_params() !=
        4_121 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_method_authenticatormobileclient_serialize_entries() !=
        42_768 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_constructor_authenticatorimporter_new() != 46_821 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_authenticator_common_mobile_checksum_constructor_authenticatormobileclient_new() != 23_343 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
